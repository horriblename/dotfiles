;; ---------------------
;; Variable definitions
;; ---------------------

;; Constants

;; (defvar WM "hyprland")
(defvar wsIcons `["","","","","","","",""]`)
(defvar wsUnknownIcon "")
(defvar wsPersistent 6)
(defvar audioIcons `["婢", "奄", "奔", "墳"]`)
(defvar micIcons `["",""]`)
(defvar netIcons `{"wifi": "" , "ethernet": "", "unknown": "", "disconnected": ""}`)
(defvar dayOfWeek `["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]`)
(defvar sep "|")

(defvar snapCache "/home/py/.cache/hyprview")


;; State Variable
(defvar VolOutScaleShow false)
(defvar VolInScaleShow false)

(defpoll datetime :interval "5s"
      :initial `date +'{"time": "%H:%M", "date": "%d/%m" , "dayOfWeek": %w}'`
      `date +'{"time": "%H:%M", "date": "%d/%m" , "dayOfWeek": %w}'`)

(defpoll netStat :interval "100s"
      :initial `scripts/check-network`
      `scripts/check-network`)

(deflisten volumeOut 
        :initial `100`
        `scripts/volume-listener`)

(deflisten wsState :initial ""
        `scripts/hyprworkspaces`)

;; ---------------------
;; Widget definitions
;; ---------------------

(defwidget _clock []
        (box :class "clock" :spacing 5
         :tooltip "${dayOfWeek[datetime.dayOfWeek]}, ${datetime.date}"
         (label :text {datetime.time})))

(defwidget _network []
        ( box :class "sys-item net-box"
         (label :text {netIcons[netStat.type]} 
          :tooltip {netStat.name})))

(defwidget _battery [battery status one two three four five six seven charge]
        (box :class "bat-box" :space-evenly false :spacing 8
         (label :text { status == 'Carging' ? charge :
                       battery < 15 ? seven :
                       battery < 30 ? six :
                       battery < 45 ? five :
                       battery < 60 ? four :
                       battery < 75 ? three :
                       battery < 95 ? two : one})))

(defwidget _speaker []
        (eventbox :class "sys-item speaker-box"
         :onscroll `pactl set-sink-volume @DEFAULT_SINK@ $([ {} = up ] && echo + || echo -)4%`
         :onhover "${EWW_CMD} update VolOutScaleShow=true"
         :onhoverlost "${EWW_CMD} update VolOutScaleShow=false"
         :onrightclick "pavucontrol"
         (box :orientation 'h'
          :space-evenly false
          (revealer :transition "slideleft"
           :reveal VolOutScaleShow
           :duration "550ms"
           (_volOutSlider))
          (button :onclick  `pactl set-sink-mute @DEFAULT_SINK@ toggle`
           { volumeOut < 0 ? audioIcons[0] : 
            volumeOut < 30 ? audioIcons[1] :
            volumeOut < 70 ? audioIcons[2] : audioIcons[3]}))))

(defwidget _microphone []
        (eventbox :class "sys-item mic-box"
         :onscroll `pactl set-source-volume @DEFAULT_SOURCE@ $([ {} = up ] && echo + || echo -)4%`
         :onhover "${EWW_CMD} update VolInScaleShow=true"
         :onhoverlost "${EWW_CMD} update VolInScaleShow=false"
         :onrightclick "pavucontrol"
         (box :orientation 'h'
          :space-evenly false
          (revealer :transition "slideleft"
           :reveal VolInScaleShow
           :duration "550ms"
           (_volInSlider))
          (button :onclick  `pactl set-source-mute @DEFAULT_SOURCE@ toggle`
           { volumeOut > 0 ? micIcons[1] : micIcons [0]}))))

(defwidget _volOutSlider []
        (scale :class "vol-out-bar"
         :flipped false
         :marks false
         :round-digits 0
         :value { volumeOut < 0 ? -volumeOut : volumeOut}
         :min 0
         :max 100
         ;; :onchange `pactl set-sink-volume @DEFAULT_SINK@ {}%`
         :orientation 'h'))

(defwidget _volInSlider []
        (scale :class "vol-in-bar"
         :flipped false
         :marks false
         :round-digits 0
         :value { volumeOut < 0 ? -volumeOut : volumeOut}
         :min 0
         :max 100
         ;; :onchange `pactl set-soutce-volume @DEFAULT_SOURCE@ {}%`
         :orientation 'h'))

(defwidget _memUsage []
        (box :class "sys-item ram-box" :vexpand "false" :hexpand "false" 
         (circular-progress :value {EWW_RAM.used_mem_perc}
          :class "mem-meter"
          :start-at 25
          :thickness 14
          (button 
           :class "iconram"
           :limit-width 2
           :tooltip "RAM ${round(EWW_RAM.used_mem_perc, 0)}%"
           :onclick "notify-send test"
           :show_truncated false
           :wrap false
           ""))))

(defwidget _cpuUsage []
        (box :class "sys-item cpu-box"
         (circular-progress :value {EWW_CPU.avg}
          :class "cpu-meter"
          :start-at 25
          :thickness 14
          (button 
           :class "iconcpu"
           :limit-width 2
           :tooltip "CPU ${round(EWW_CPU.avg, 2)}%" 
           :onclick "notify-send test"
           :show_truncated false
           :wrap false
           ""))))

(defwidget workspace [ws]
        (button :onclick "hyprctl dispatch workspace ${ws.index + 1}"
         :visible { ws.state != 0 || ws.index < wsPersistent}
         :class {
                 ws.state == 0 ? "workspace ws-persistent" :
                 ws.state == 1 ? "workspace" : "workspace ws-focused"}
         { wsIcons[ws.index] ?: wsUnknownIcon}))

(defwidget workspaces []
  (eventbox :class "workspaces"
        :orientation "h"
        :halign "start"
        :spacing 10
        :onscroll "hyprctl dispatch workspace $([ {} = up ] && echo -1 || echo +1)"
        (box
          (for ws in wsState
           (workspace :ws ws)))))

(defwidget barleft []
        (box :orientation "h"
         :space-evenly false
         :halign "start"
         :spacing 1
         (workspaces)))

(defwidget system []
        (box :orientation "h"
         :space-evenly false
         :halign "end"
         :spacing 5
         (_microphone)
         sep
         (_speaker)
         sep
         (_network)
         sep
         (_memUsage)
         sep
         (_cpuUsage)))


(defwidget trays []
        (box :orientation "h"
         :space-evenly false
         :halign "end"
         :spacing 1
         (system)))

;; ---------------------
;; Window definitions
;; ---------------------

(defwindow bar
        :monitor 0
        :exclusive false
        :geometry (geometry
                   :width "100%"
                   :height "30px"
                   :x "0"
                   :y "0")
        :stacking "fg"
        :windowtype "dock"
        (centerbox :class "bar"
         :hexpand true
         :orientation "h"
         (barleft)
         (_clock)
         (trays)))


(defwindow overview
        :stacking "fg"
        :focusable false 
        :monitor 0
        :geometry (geometry
                      :width "75%"
                      :height "50%"
                      :anchor "center")
        (box :class "overview"
         :spacing 5
         :orientation "v"
         :space-evenly: true
         (box :class "overview-row"
          :spacing 5
          :orientation "h"
          :space-evenly true
          (for i in "[1, 2, 3]"
              (button :class "snap-box"
                :onclick  "hyprctl dispatch workspace ${i} && ${EWW_CMD} close overview"
                (image :path "${snapCache}/ws-${i}.png"
                 :image-width {1920 * 0.25}
                 :image-height {1080 / 4}))))
         (box :class "overview-row"
          :spacing 5
          :orientation "h"
          :space-evenly true
          (for i in "[4, 5, 6]"
              (button :class "snap-box"
                :onclick  "hyprctl dispatch workspace ${i} && ${EWW_CMD} close overview"
                (image :path "${snapCache}/ws-${i}.png"
                 :image-width {1920 * 0.25}
                 :image-height {1080 / 4}))))))

;; vim: ft=yuck : syn=scheme
